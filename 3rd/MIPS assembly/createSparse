# Date:16/12/2018
# Description: ERGASIA 3
#
#Registers:
#$a0:argument for System Services,argument for functions->
#readPin:int [] pin,createSparse:int [] pin,add:int [ ] SparseA,printSparse:int [ ] Sparse
#$a1:argument for functions-> createSparse:int [ ] Sparse,add: int mikosSPARSEA,printSparse:int mikos
#$a2:argument for functions-> add:int [ ] SparseB
#$a3:argument for functions-> add:int [ ] SparseC
#$t0: main:choise
#$t1: main:mhkosSPARSEA, add: sparseA, printSparse: int [ ] Sparse
#$t2: readPin:pin.length, add:sparseB,printSparse: mhkos pinaka
#$t3: main:mhkosSPARSEB, readPin:pin [i], createSparse:pin [i],add:SparseA[a++] + SparseB[b++]
#$t4: readPin:i, createSparse:i, printSparse:i
#$t5: createSparse:k,add: int mikosSPARSEB
#$t6: createSparse:mikosA/B, add:a
#$t7: add:b
#$t8: add:c
#$v0:return value for System Services
#$v1:return value for System Services
#$sp: stack pointer
.text
.globl _main
_main:
menu_loop:
	la $a0,menu #print menu message
	li $v0,4
	syscall
	
	la $a0,choose #ask
	li $v0,4
	syscall
	
	li $v0,5	#give choise
	syscall
    	move $t0,$v0
	
	la $a0,CRLF #print \n
	li $v0,4
	syscall
	
	beqz $t0,exit #0.Exit
	bgt $t0,8,wrong #choise>8
	blt $t0,0,wrong #choise<0
	beq $t0,1,choice1 #1.Read Array A
	beq $t0,2,choice2 #2.Read Array B
	beq $t0,3,choice3 #3.Create Sparse Array A
	beq $t0,4,choice4 #4.Create Sparse Array B
	beq $t0,5,choice5 #5.Create Sparse Array C = A + B
	beq $t0,6,choice6 #6.Display Sparse Array A
	beq $t0,7,choice7 #7.Display Sparse Array B
	beq $t0,8,choice8 #8.Display Sparse Array C
	
choice1:
	la $a0,readA #print readA
	li $v0,4		
	syscall
	la $a0,CRLF #print \n
	li $v0,4		
	syscall
	
	la $a0,A	#a0=int [] pin
	jal readPin #void readPin (int [] pin)
	j menu_loop
choice2:
	la $a0,readB #print readB
	li $v0,4		
	syscall
	la $a0,CRLF #print \n
	li $v0,4		
	syscall
	la $a0,B #a0=int [] pin
	jal readPin #void readPin (int [] pin)
	j menu_loop
choice3:
	la $a0,createA #print createA
	li $v0,4		
	syscall
	la $a0,CRLF #print \n
	li $v0,4
	syscall
	la $a0,A #a0=int [ ] pin
	la $a1,SPARSEA #a1=int [ ] Sparse
	jal createSparse #int createSparse (int [ ] pin, int [ ] Sparse)
	la $t1,mhkosSPARSEA #save return value 
	sw $v0,($t1) #return int v0=mhkos sparse A
	
	srl $v0,$v0,1
	move $a0,$v0
	li $v0,1		#print num of values
	syscall
	la $a0,values #print values
	li $v0,4		
	syscall
	la $a0,CRLF #print \n
	li $v0,4
	syscall
	j menu_loop

choice4:
	la $a0,createB #print createB
	li $v0,4		
	syscall
	la $a0,CRLF #print \n
	li $v0,4
	syscall
	la $a0,B #a0=int [ ] pin
	la $a1,SPARSEB #a1=int [ ] Sparse
	jal createSparse #int createSparse (int [ ] pin, int [ ] Sparse)
	la $t1,mhkosSPARSEB #save return value
	sw $v0,($t1) #return int v0=mhkos spare B
	
	srl $v0,$v0,1
	move $a0,$v0
	li $v0,1		#print num of values
	syscall
	la $a0,values #print values
	li $v0,4		
	syscall
	la $a0,CRLF #print \n
	li $v0,4
	syscall
	j menu_loop
choice5:
	la $a0,createC #print createC
	li $v0,4		
	syscall
	la $a0,CRLF #print \n
	li $v0,4
	syscall
	la $a0,SPARSEA #a0=int [ ] SparseA
	lw $a1,mhkosSPARSEA #a1=int mikosA
	la $a2,SPARSEB #a2=int [ ] SparseB
	la $a3,C #a4=int [ ] SparseC
	lw $t3,mhkosSPARSEB #a3=int mikosB
	addi $sp,$sp,-4 
	sw $t3,0($sp) #save to stack

	#int add (int [ ] SparseA, int mikosA, int [ ] SparseB, int mikosB, int [ ] SparseC)
	jal add_C

	la $t1,mhkosC #save return value
	sw $v0,($t1)  #return int v0=mhkos spare C
	
	srl $v0,$v0,1
	move $a0,$v0
	li $v0,1	#print num of values
	syscall
	la $a0,values #print values
	li $v0,4		
	syscall
	la $a0,CRLF #print \n
	li $v0,4
	syscall
	j menu_loop
choice6:
	la $a0,dispA #print dispA
	li $v0,4		
	syscall
	la $a0,CRLF #print \n
	li $v0,4
	syscall
	
	la $a0,SPARSEA #a0=int [ ] Sparse
	lw $a1,mhkosSPARSEA   #a1=int mikos
	jal printSparse #void printSparse (int [ ] Sparse, int mikos)
	j menu_loop
choice7:
	la $a0,dispB #print dispB
	li $v0,4		
	syscall
	la $a0,CRLF #print \n
	li $v0,4
	syscall
	la $a0,SPARSEB  #a0=int [ ] Sparse
	lw $a1,mhkosSPARSEB    #a1=int mikos
	jal printSparse #void printSparse (int [ ] Sparse, int mikos)
	j menu_loop
choice8:
	la $a0,dispC #print dispC
	li $v0,4		
	syscall
	la $a0,CRLF #print \n
	li $v0,4
	syscall
	la $a0,C  #a0=int [ ] Sparse
	lw $a1,mhkosC  #a1=int mikos
	jal printSparse #void printSparse (int [ ] Sparse, int mikos)
	j menu_loop 
	
exit: #end of program
	li $v0,10
	syscall
wrong: #wrong choice
	la $a0,wrong_message #print wrong message
	li $v0,4
	syscall
	
	la $a0,CRLF #print \n
	li $v0,4
	syscall
	
	j menu_loop
	
readPin:
	#for (int i=0; i<pin.length; i++)
	#	pin [i] = readInt ("Position " + i +" :");

	#$a0=int [ ] pin

	li $t2,40 #t2=mhkosA/B
	li $t4,0 #i=0
loop_1:	
	li $v0,5 #readInt
	syscall
	move $t3,$v0 #t3=int 

	sw $t3,($a0) #store int, pin [i]=int t3

	addi $a0,$a0,4  #next address at pin
	addi $t4,$t4,4 #i++

	blt $t4,$t2,loop_1 #if (i<pin.length) continue
	jr $ra #else exit readPin
	
createSparse:	
	#int i, k=0;
    #for (i=0; i<pin.length; i++)
	#if (pin [i] != 0){
    #	Sparse [k++] = i;
    #	Sparse [k++] = pin [i];
	#}
	#return k;
	
	#$a0=int [ ] pin
	#$a1=int [ ] Sparse
	li $t6,10 #t6=mhkosA/B
	li $t4,0 #i=0
	li $t5,0 #k=0
loop_2:
	lw $t3,($a0) #load pin [i]
	beqz $t3,next #if (pin [i] == 0) stop
	#else
	sw $t4,($a1) #Sparse [k] = i;
	addi $t5,$t5,1 #k++
	addi $a1,$a1,4 #k++
	sw $t3,($a1) #Sparse [k] = pin [i];
	addi $t5,$t5,1 #k++
	addi $a1,$a1,4 #k++
next:
	addi $a0,$a0,4 #i++
	addi $t4,$t4,1 #i++
	blt $t4,$t6,loop_2 #if(i<pin.length) continue
	move $v0,$t5 #return k	
	jr $ra #exit createSparse
add_C:
	#for (a=0, b=0, c=0; a<mikosA && b<mikosB; )
	#	if (SparseA[a] < SparseB [b]) {
	#		SparseC [c++] = SparseA[a++];
	#		SparseC [c++] = SparseA[a++];
	#	}
	#	else if (SparseA[a] > SparseB [b]) {
	#		SparseC [c++] = SparseB[b++];
	#		SparseC [c++] = SparseB[b++];
	#		}
	#	else { SparseC [c++] = SparseA[a++];
	#		b++;
	#		SparseC [c++] = SparseA[a++] + SparseB[b++];
	#} //if
	#for (;a<mikosA;) {
	#	SparseC [c++] = SparseA[a++];
	#	SparseC [c++] = SparseA[a++];
	#} // for
	#for (;b<mikosB;) {
	#	SparseC [c++] = SparseB[b++];
	#	SparseC [c++] = SparseB[b++];
	#} // for
	#	return c;
		
	#$a0 =int [ ] SPARSEA
	#$a1 = int mikosSPARSEA
	#$a2 =int [ ] SPARSEB
	#$a3 = C
	
	lw $t5,0($sp) #$t5 = mhkosSPARSEb
	addi $sp,$sp,4 
	li $t6,0 #a=0
	li $t7,0 #b=0
	li $t8,0 #c=0
loop_4:
	blt $t6,$a1,check_next #if(a<mikosA) check next condition
	j loop_5 #else break loop_4
inside:
	#if (SparseA[a] < SparseB [b]) {
	#		SparseC [c++] = SparseA[a++];
	#		SparseC [c++] = SparseA[a++];
	#	}
	lw $t1,($a0) #load SparseA[a]
	lw $t2,($a2) #load SparseB [b]
	
	bge $t1,$t2,elseif #if (SparseA[a] < SparseB [b])
	
	sw $t1,($a3) #SparseC [c] = SparseA[a]
	addi $a0,$a0,4 #a++
	addi $a3,$a3,4 #c++
	addi $t6,$t6,1 #a++
	addi $t8,$t8,1 #c++
	
	lw $t1,($a0) #load SparseA[a]
	
	sw $t1,($a3) #SparseC [c] = SparseA[a]
	addi $a0,$a0,4 #a++
	addi $a3,$a3,4 #c++
	addi $t6,$t6,1 #a++
	addi $t8,$t8,1 #c++
	
	j endif
elseif:
	#	else if (SparseA[a] > SparseB [b]) {
	#		SparseC [c++] = SparseB[b++];
	#		SparseC [c++] = SparseB[b++];
	#		}
	
	
	beq $t1,$t2,else #if (SparseA[a] == SparseB [b]) go to else
	sw $t2,($a3)  #SparseC [c] = SparseB[b]
	addi $a2,$a2,4 #b++
	addi $a3,$a3,4 #c++
	addi $t7,$t7,1 #b++
	addi $t8,$t8,1 #c++
	
	lw $t2,($a2) #load SparseB [b]
	
	sw $t2,($a3) #SparseC [c] = SparseB[b]
	addi $a2,$a2,4 #b++
	addi $a3,$a3,4 #c++
	addi $t7,$t7,1 #b++
	addi $t8,$t8,1 #c++
	
	j endif 
	
else:
	#else { 
	#	SparseC [c++] = SparseA[a++];
	#	b++;
	#	SparseC [c++] = SparseA[a++] + SparseB[b++];
	
	sw $t1,($a3) #SparseC [c] = SparseA[a]
	addi $t6,$t6,1 #a++
	addi $t7,$t7,1 #b++
	addi $t8,$t8,1 #c++
	addi $a0,$a0,4 #a++
	addi $a2,$a2,4 #b++
	addi $a3,$a3,4 #c++
	
	lw $t1,($a0) #load SparseA[a]
	lw $t2,($a2) #load SparseB[b]
	
	add $t3,$t1,$t2 #SparseA[a] + SparseB[b]
	sw $t3,($a3)  #SparseC [c]=t3

	addi $t6,$t6,1 #a++
	addi $t7,$t7,1 #b++
	addi $t8,$t8,1 #c++
	addi $a0,$a0,4 #a++
	addi $a2,$a2,4 #b++
	addi $a3,$a3,4 #c++	
endif:
	j loop_4
check_next:
	blt $t7,$t5,inside #if(b<mikosB) continue else break loop_4
	#for (;a<mikosA;) {
	#	SparseC [c++] = SparseA[a++];
	#	SparseC [c++] = SparseA[a++];
	#} // for
loop_5:
	bge $t6,$a1,loop_6 #if(a>=mikosA) break
	lw $t1,($a0) #load parseA[a]
	
	sw $t1,($a3) #SparseC [c] = SparseA[a]

	addi $a0,$a0,4 #a++
	addi $a3,$a3,4 #c++
	addi $t6,$t6,1 #a++
	addi $t8,$t8,1 #c++
	
	lw $t1,($a0) #load parseA[a]
	
	sw $t1,($a3) #SparseC [c] = SparseA[a]
	addi $a0,$a0,4 #a++
	addi $a3,$a3,4 #c++
	addi $t6,$t6,1 #a++
	addi $t8,$t8,1 #c++
	j loop_5

	#for (;b<mikosB;) {
	#SparseC [c++] = SparseB[b++];
	#SparseC [c++] = SparseB[b++];
	#} // for 
loop_6:
	
	bge $t7,$t5,exit1 #if (;b>=mikosB;) break
	lw $t2,($a2) #load SparseB[b]
	sw $t2,($a3) #SparseC [c] = SparseB[b]
	addi $a2,$a2,4 #b++
	addi $a3,$a3,4 #c++
	addi $t7,$t7,1 #b++
	addi $t8,$t8,1 #c++
	
	lw $t2,($a2) #load SparseB[b]
	
	sw $t2,($a3) #SparseC [c] = SparseB[b]
	addi $a2,$a2,4 #b++
	addi $a3,$a3,4 #c++
	addi $t7,$t7,1 #b++
	addi $t8,$t8,1 #c++
	j loop_6
	
exit1:	
	move $v0,$t8 #return c
	jr $ra #exit add_C
	
printSparse:
	#for (int i=0; i<mikos;)
	#	println ("Position: " + Sparse [i++] + " Value: " + Sparse [i++]);
	
	move $t1,$a0 #int [ ] Sparse
	move $t2,$a1 #mhkos pinaka
	
	li $t4,0 #i=0
loop_3:
	la $a0,position #print string position
	li $v0,4		
	syscall
	
	lw $a0,($t1)	#print Sparse[i]
	li $v0,1
	syscall
	
	addi $t1,$t1,4 #i++
	addi $t4,$t4,1
	
	la $a0,value #print string value
	li $v0,4
	syscall
	
	lw $a0,($t1) #print Sparse[i]
	li $v0,1
	syscall
	
	la $a0,CRLF #print \n
	li $v0,4
	syscall
	
	addi $t1,$t1,4 #i++
	addi $t4,$t4,1 #i<mikos
	
	blt $t4,$t2,loop_3
	jr $ra

.data
menu: .asciiz "1. Read Array A\n2. Read Array B\n-----------------------------\n3. Create Sparse Array A\n4. Create Sparse Array B\n5. Create Sparse Array C = A + B \n-----------------------------\n6. Display Sparse Array A\n7. Display Sparse Array B\n8. Display Sparse Array C\n-----------------------------\n0. Exit\n-----------------------------\n"
choose: .asciiz "Choice? "
CRLF: .asciiz "\n"
wrong_message: .asciiz "Choice out of bounds. Please choose again."
A: .word 0 0 0 0 0 0 0 0 0 0 0
B: .word 0 0 0 0 0 0 0 0 0 0 0
C: .word 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
SPARSEA: .word 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
SPARSEB: .word 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
position: .asciiz "Position: "
value: .asciiz " Value: "
mhkosA: .word 10
mhkosB: .word 10
mhkosC: .word 0
mhkosSPARSEA: .word 0
mhkosSPARSEB: .word 0
readA: .asciiz "Reading Array A"
readB: .asciiz "Reading Array B"
createA: .asciiz "Creating Sparse Array A"
createB: .asciiz "Creating Sparse Array B"
values: .asciiz "values"
createC: .asciiz "Creating Sparse Array C = A + B"
dispA: .asciiz "Displaying Sparse Array A"
dispB: .asciiz "Displaying Sparse Array B"
dispC: .asciiz "Displaying Sparse Array C"